# -*- coding: utf-8 -*-
"""AE_ANN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MEx-QjSeNDgLxDC3QUaMyo1XusvILz5b

#Data Preprocessing

##Importing modules
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""## Docking the file nd visualizing"""

data = pd.read_csv(r'/content/American Express User Exit Pred.csv')

data.head()

"""##Checking for null values"""

data.isnull().sum()

train=data.iloc[:,:9]
pred=data.iloc[:,9]

num_cols = data.select_dtypes(include=np.number).columns.tolist()
cat_cols = data.select_dtypes(include=['object']).columns.tolist()
num_cols.pop()
print("Numerical columns:", num_cols)
print("Categorical columns:", cat_cols)

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()
data[num_cols] = scaler.fit_transform(data[num_cols])

data = pd.get_dummies(data, columns=cat_cols, drop_first=True)

data.head()

X_train.shape[1]

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from sklearn.model_selection import train_test_split

# Split data into training and testing sets
X = data.drop('Closed', axis=1)
y = data['Closed']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create the ANN model
model = keras.Sequential([
    layers.Dense(64, activation='relu', input_shape=(X_train.shape[1],)),
    layers.Dense(32, activation='relu'),
    layers.Dense(1, activation='sigmoid')  # Output layer for binary classification
])

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(X_train, y_train, epochs=25, batch_size=32, validation_split=0.2)

# Evaluate the model on the test set
loss, accuracy = model.evaluate(X_test, y_test)
print('Test accuracy:', accuracy)

# Make predictions
y_pred = model.predict(X_test)
y_pred_classes = (y_pred > 0.5).astype(int)

# You can further analyze the model's performance using metrics like confusion matrix, precision, recall, etc.